// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: conversations.proto

package conversations

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "github.com/mhconradt/pingpong-conversations-api/proto/conversation"
	_ "github.com/mhconradt/pingpong-conversations-api/proto/message"
	_ "github.com/mhconradt/pingpong-conversations-api/proto/status"
	_ "github.com/mhconradt/pingpong-conversations-api/proto/user"
	_ "google.golang.org/genproto/protobuf/field_mask"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Conversations service

type ConversationsService interface {
	// Creates a new conversation with the creator in it
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...client.CallOption) (*CreateConversationResponse, error)
	// Updates the fields within a conversation specified in the request
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...client.CallOption) (*UpdateConversationResponse, error)
	// Subscribes the user to a stream of their conversations.
	// Notifications of new and deleted conversations will arrive via this stream.
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...client.CallOption) (Conversations_ListConversationsService, error)
	// Deletes the conversation.
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...client.CallOption) (*DeleteConversationResponse, error)
	// Sends a message
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error)
	// Subscribes the user to a stream of the conversation's messages
	// Lists any messages after start_message_id at the beginning of sessions
	// Pushes any new messages throughout the session
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...client.CallOption) (Conversations_ListMessagesService, error)
	// Adds a user to the conversation
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...client.CallOption) (*AddMemberResponse, error)
	// Subscribes the user to a stream of the conversation's users
	// Lists existing users at the beginning of the session
	// Notifies the user of any new or removed users throughout the session
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...client.CallOption) (Conversations_ListMembersService, error)
	// Removes a user from the conversation
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...client.CallOption) (*RemoveMemberResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...client.CallOption) (*DeactivateUserResponse, error)
}

type conversationsService struct {
	c    client.Client
	name string
}

func NewConversationsService(name string, c client.Client) ConversationsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "conversations"
	}
	return &conversationsService{
		c:    c,
		name: name,
	}
}

func (c *conversationsService) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...client.CallOption) (*CreateConversationResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.CreateConversation", in)
	out := new(CreateConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsService) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...client.CallOption) (*UpdateConversationResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.UpdateConversation", in)
	out := new(UpdateConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsService) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...client.CallOption) (Conversations_ListConversationsService, error) {
	req := c.c.NewRequest(c.name, "Conversations.ListConversations", &ListConversationsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &conversationsServiceListConversations{stream}, nil
}

type Conversations_ListConversationsService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListConversationsResponse, error)
}

type conversationsServiceListConversations struct {
	stream client.Stream
}

func (x *conversationsServiceListConversations) Close() error {
	return x.stream.Close()
}

func (x *conversationsServiceListConversations) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationsServiceListConversations) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationsServiceListConversations) Recv() (*ListConversationsResponse, error) {
	m := new(ListConversationsResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conversationsService) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...client.CallOption) (*DeleteConversationResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.DeleteConversation", in)
	out := new(DeleteConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.SendMessage", in)
	out := new(SendMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsService) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...client.CallOption) (Conversations_ListMessagesService, error) {
	req := c.c.NewRequest(c.name, "Conversations.ListMessages", &ListMessagesRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &conversationsServiceListMessages{stream}, nil
}

type Conversations_ListMessagesService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListMessagesResponse, error)
}

type conversationsServiceListMessages struct {
	stream client.Stream
}

func (x *conversationsServiceListMessages) Close() error {
	return x.stream.Close()
}

func (x *conversationsServiceListMessages) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationsServiceListMessages) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationsServiceListMessages) Recv() (*ListMessagesResponse, error) {
	m := new(ListMessagesResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conversationsService) AddMember(ctx context.Context, in *AddMemberRequest, opts ...client.CallOption) (*AddMemberResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.AddMember", in)
	out := new(AddMemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsService) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...client.CallOption) (Conversations_ListMembersService, error) {
	req := c.c.NewRequest(c.name, "Conversations.ListMembers", &ListMembersRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &conversationsServiceListMembers{stream}, nil
}

type Conversations_ListMembersService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListMembersResponse, error)
}

type conversationsServiceListMembers struct {
	stream client.Stream
}

func (x *conversationsServiceListMembers) Close() error {
	return x.stream.Close()
}

func (x *conversationsServiceListMembers) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationsServiceListMembers) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationsServiceListMembers) Recv() (*ListMembersResponse, error) {
	m := new(ListMembersResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conversationsService) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...client.CallOption) (*RemoveMemberResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.RemoveMember", in)
	out := new(RemoveMemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.GetUser", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationsService) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...client.CallOption) (*DeactivateUserResponse, error) {
	req := c.c.NewRequest(c.name, "Conversations.DeactivateUser", in)
	out := new(DeactivateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Conversations service

type ConversationsHandler interface {
	// Creates a new conversation with the creator in it
	CreateConversation(context.Context, *CreateConversationRequest, *CreateConversationResponse) error
	// Updates the fields within a conversation specified in the request
	UpdateConversation(context.Context, *UpdateConversationRequest, *UpdateConversationResponse) error
	// Subscribes the user to a stream of their conversations.
	// Notifications of new and deleted conversations will arrive via this stream.
	ListConversations(context.Context, *ListConversationsRequest, Conversations_ListConversationsStream) error
	// Deletes the conversation.
	DeleteConversation(context.Context, *DeleteConversationRequest, *DeleteConversationResponse) error
	// Sends a message
	SendMessage(context.Context, *SendMessageRequest, *SendMessageResponse) error
	// Subscribes the user to a stream of the conversation's messages
	// Lists any messages after start_message_id at the beginning of sessions
	// Pushes any new messages throughout the session
	ListMessages(context.Context, *ListMessagesRequest, Conversations_ListMessagesStream) error
	// Adds a user to the conversation
	AddMember(context.Context, *AddMemberRequest, *AddMemberResponse) error
	// Subscribes the user to a stream of the conversation's users
	// Lists existing users at the beginning of the session
	// Notifies the user of any new or removed users throughout the session
	ListMembers(context.Context, *ListMembersRequest, Conversations_ListMembersStream) error
	// Removes a user from the conversation
	RemoveMember(context.Context, *RemoveMemberRequest, *RemoveMemberResponse) error
	GetUser(context.Context, *GetUserRequest, *GetUserResponse) error
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	DeactivateUser(context.Context, *DeactivateUserRequest, *DeactivateUserResponse) error
}

func RegisterConversationsHandler(s server.Server, hdlr ConversationsHandler, opts ...server.HandlerOption) error {
	type conversations interface {
		CreateConversation(ctx context.Context, in *CreateConversationRequest, out *CreateConversationResponse) error
		UpdateConversation(ctx context.Context, in *UpdateConversationRequest, out *UpdateConversationResponse) error
		ListConversations(ctx context.Context, stream server.Stream) error
		DeleteConversation(ctx context.Context, in *DeleteConversationRequest, out *DeleteConversationResponse) error
		SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error
		ListMessages(ctx context.Context, stream server.Stream) error
		AddMember(ctx context.Context, in *AddMemberRequest, out *AddMemberResponse) error
		ListMembers(ctx context.Context, stream server.Stream) error
		RemoveMember(ctx context.Context, in *RemoveMemberRequest, out *RemoveMemberResponse) error
		GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error
		DeactivateUser(ctx context.Context, in *DeactivateUserRequest, out *DeactivateUserResponse) error
	}
	type Conversations struct {
		conversations
	}
	h := &conversationsHandler{hdlr}
	return s.Handle(s.NewHandler(&Conversations{h}, opts...))
}

type conversationsHandler struct {
	ConversationsHandler
}

func (h *conversationsHandler) CreateConversation(ctx context.Context, in *CreateConversationRequest, out *CreateConversationResponse) error {
	return h.ConversationsHandler.CreateConversation(ctx, in, out)
}

func (h *conversationsHandler) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, out *UpdateConversationResponse) error {
	return h.ConversationsHandler.UpdateConversation(ctx, in, out)
}

func (h *conversationsHandler) ListConversations(ctx context.Context, stream server.Stream) error {
	m := new(ListConversationsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ConversationsHandler.ListConversations(ctx, m, &conversationsListConversationsStream{stream})
}

type Conversations_ListConversationsStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListConversationsResponse) error
}

type conversationsListConversationsStream struct {
	stream server.Stream
}

func (x *conversationsListConversationsStream) Close() error {
	return x.stream.Close()
}

func (x *conversationsListConversationsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationsListConversationsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationsListConversationsStream) Send(m *ListConversationsResponse) error {
	return x.stream.Send(m)
}

func (h *conversationsHandler) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, out *DeleteConversationResponse) error {
	return h.ConversationsHandler.DeleteConversation(ctx, in, out)
}

func (h *conversationsHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error {
	return h.ConversationsHandler.SendMessage(ctx, in, out)
}

func (h *conversationsHandler) ListMessages(ctx context.Context, stream server.Stream) error {
	m := new(ListMessagesRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ConversationsHandler.ListMessages(ctx, m, &conversationsListMessagesStream{stream})
}

type Conversations_ListMessagesStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListMessagesResponse) error
}

type conversationsListMessagesStream struct {
	stream server.Stream
}

func (x *conversationsListMessagesStream) Close() error {
	return x.stream.Close()
}

func (x *conversationsListMessagesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationsListMessagesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationsListMessagesStream) Send(m *ListMessagesResponse) error {
	return x.stream.Send(m)
}

func (h *conversationsHandler) AddMember(ctx context.Context, in *AddMemberRequest, out *AddMemberResponse) error {
	return h.ConversationsHandler.AddMember(ctx, in, out)
}

func (h *conversationsHandler) ListMembers(ctx context.Context, stream server.Stream) error {
	m := new(ListMembersRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ConversationsHandler.ListMembers(ctx, m, &conversationsListMembersStream{stream})
}

type Conversations_ListMembersStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListMembersResponse) error
}

type conversationsListMembersStream struct {
	stream server.Stream
}

func (x *conversationsListMembersStream) Close() error {
	return x.stream.Close()
}

func (x *conversationsListMembersStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationsListMembersStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationsListMembersStream) Send(m *ListMembersResponse) error {
	return x.stream.Send(m)
}

func (h *conversationsHandler) RemoveMember(ctx context.Context, in *RemoveMemberRequest, out *RemoveMemberResponse) error {
	return h.ConversationsHandler.RemoveMember(ctx, in, out)
}

func (h *conversationsHandler) GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error {
	return h.ConversationsHandler.GetUser(ctx, in, out)
}

func (h *conversationsHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.ConversationsHandler.CreateUser(ctx, in, out)
}

func (h *conversationsHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.ConversationsHandler.UpdateUser(ctx, in, out)
}

func (h *conversationsHandler) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, out *DeactivateUserResponse) error {
	return h.ConversationsHandler.DeactivateUser(ctx, in, out)
}
